@model Galleria.ViewModels.EditImageDetailsViewModel

@{ Layout = null;}
    
<div class="modal-header">
    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
    <h3 id="editFormLabel">Image details</h3>
</div>
@using (Ajax.BeginForm("Edit", "ImageDetails", null, new AjaxOptions { HttpMethod = "Post", OnSuccess = "editComplete" }))
{
    @Html.HiddenFor(a => a.Id);
    <div class="modal-body">
        <div class="form-group">
            @Html.LabelFor(a => a.Title)
            @Html.TextBoxFor(a => a.Title, new { @class="form-control" })
        </div>        
        <div class="form-group">
            @Html.HiddenFor(a => a.HiddenTags)
            @Html.Label("Tags")
            <input type="text" name="tags" class="form-control tagManager" placeholder="enter a new tag here" value=""/>
        </div>
    </div>
    <div class="modal-footer">
        @Ajax.ActionLink("delete picture", "Delete", "ImageDetails", new { imageId = Model.Id }, new AjaxOptions { HttpMethod = "Post", OnSuccess = "deleteComplete" }, new { @class="btn btn-danger pull-left" })
        <input type="submit" name="submitAction" class="btn btn-primary" value="save" />
    </div>
}

<script type="text/javascript">
    function editComplete(data)
    {
        //this mapping should take place in the controller
        data.LazyLoadPlaceholderUrl = data.PreviewUrl;
        //find this image in the observable array
        var image = ko.utils.arrayFirst(viewModel.processedImages(), function(currentImage) {
            return currentImage.Id === data.Id;
        });
        viewModel.processedImages.replace(image, data);    
        hideEditDialog();
    }

    function deleteComplete(data)
    {
        //find this image in the observable array
        var image = ko.utils.arrayFirst(viewModel.processedImages(), function(currentImage) {
            return currentImage.Id === data.Id;
        });
        viewModel.processedImages.remove(image);    
        hideEditDialog();
    }

    $(".tagManager").tagsManager({
        @if (!string.IsNullOrWhiteSpace(Model.ExistingTagsJson)) {
            @:prefilled: @Html.Raw(Model.ExistingTagsJson),
        }
        hiddenTagListName: 'HiddenTags'
    });
</script>
